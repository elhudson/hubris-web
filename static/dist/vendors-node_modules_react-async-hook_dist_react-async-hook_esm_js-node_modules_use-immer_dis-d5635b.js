"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhubris_web"] = self["webpackChunkhubris_web"] || []).push([["vendors-node_modules_react-async-hook_dist_react-async-hook_esm_js-node_modules_use-immer_dis-d5635b"],{

/***/ "./node_modules/react-async-hook/dist/react-async-hook.esm.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-async-hook/dist/react-async-hook.esm.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAsync: () => (/* binding */ useAsync),\n/* harmony export */   useAsyncAbortable: () => (/* binding */ useAsyncAbortable),\n/* harmony export */   useAsyncCallback: () => (/* binding */ useAsyncCallback)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// A type of promise-like that resolves synchronously and supports only one observer\n\nconst _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\nconst _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\";\n\n// Asynchronously await a promise and pass the result to a finally continuation\nfunction _finallyRethrows(body, finalizer) {\n  try {\n    var result = body();\n  } catch (e) {\n    return finalizer(true, e);\n  }\n  if (result && result.then) {\n    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n  }\n  return finalizer(false, value);\n}\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect; // Assign current value to a ref and returns a stable getter to get the latest value.\n// This way we are sure to always get latest value provided to hook and\n// avoid weird issues due to closures capturing stale values...\n// See https://github.com/facebook/react/issues/16956\n// See https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nvar useGetter = function useGetter(t) {\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(t);\n  useIsomorphicLayoutEffect(function () {\n    ref.current = t;\n  });\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return ref.current;\n  }, [ref]);\n};\nvar InitialAsyncState = {\n  status: 'not-requested',\n  loading: false,\n  result: undefined,\n  error: undefined\n};\nvar InitialAsyncLoadingState = {\n  status: 'loading',\n  loading: true,\n  result: undefined,\n  error: undefined\n};\nvar defaultSetLoading = function defaultSetLoading(_asyncState) {\n  return InitialAsyncLoadingState;\n};\nvar defaultSetResult = function defaultSetResult(result, _asyncState) {\n  return {\n    status: 'success',\n    loading: false,\n    result: result,\n    error: undefined\n  };\n};\nvar defaultSetError = function defaultSetError(error, _asyncState) {\n  return {\n    status: 'error',\n    loading: false,\n    result: undefined,\n    error: error\n  };\n};\nvar noop = function noop() {};\nvar DefaultOptions = {\n  initialState: function initialState(options) {\n    return options && options.executeOnMount ? InitialAsyncLoadingState : InitialAsyncState;\n  },\n  executeOnMount: true,\n  executeOnUpdate: true,\n  setLoading: defaultSetLoading,\n  setResult: defaultSetResult,\n  setError: defaultSetError,\n  onSuccess: noop,\n  onError: noop\n};\nvar normalizeOptions = function normalizeOptions(options) {\n  return _extends({}, DefaultOptions, {}, options);\n};\nvar useAsyncState = function useAsyncState(options) {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n      return options.initialState(options);\n    }),\n    value = _useState[0],\n    setValue = _useState[1];\n  var reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return setValue(options.initialState(options));\n  }, [setValue, options]);\n  var setLoading = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return setValue(options.setLoading(value));\n  }, [value, setValue]);\n  var setResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (result) {\n    return setValue(options.setResult(result, value));\n  }, [value, setValue]);\n  var setError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (error) {\n    return setValue(options.setError(error, value));\n  }, [value, setValue]);\n  var merge = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return setValue(_extends({}, value, {}, state));\n  }, [value, setValue]);\n  return {\n    value: value,\n    set: setValue,\n    merge: merge,\n    reset: reset,\n    setLoading: setLoading,\n    setResult: setResult,\n    setError: setError\n  };\n};\nvar useIsMounted = function useIsMounted() {\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    ref.current = true;\n    return function () {\n      ref.current = false;\n    };\n  }, []);\n  return function () {\n    return ref.current;\n  };\n};\nvar useCurrentPromise = function useCurrentPromise() {\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return {\n    set: function set(promise) {\n      return ref.current = promise;\n    },\n    get: function get() {\n      return ref.current;\n    },\n    is: function is(promise) {\n      return ref.current === promise;\n    }\n  };\n}; // Relaxed interface which accept both async and sync functions\n// Accepting sync function is convenient for useAsyncCallback\n\nvar useAsyncInternal = function useAsyncInternal(asyncFunction, params, options) {\n  // Fallback missing params, only for JS users forgetting the deps array, to prevent infinite loops\n  // https://github.com/slorber/react-async-hook/issues/27\n  // @ts-ignore\n  !params && (params = []);\n  var normalizedOptions = normalizeOptions(options);\n  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),\n    currentParams = _useState2[0],\n    setCurrentParams = _useState2[1];\n  var AsyncState = useAsyncState(normalizedOptions);\n  var isMounted = useIsMounted();\n  var CurrentPromise = useCurrentPromise(); // We only want to handle the promise result/error\n  // if it is the last operation and the comp is still mounted\n\n  var shouldHandlePromise = function shouldHandlePromise(p) {\n    return isMounted() && CurrentPromise.is(p);\n  };\n  var executeAsyncOperation = function executeAsyncOperation() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    // async ensures errors thrown synchronously are caught (ie, bug when formatting api payloads)\n    // async ensures promise-like and synchronous functions are handled correctly too\n    // see https://github.com/slorber/react-async-hook/issues/24\n    var promise = function () {\n      try {\n        return Promise.resolve(asyncFunction.apply(void 0, args));\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }();\n    setCurrentParams(args);\n    CurrentPromise.set(promise);\n    AsyncState.setLoading();\n    promise.then(function (result) {\n      if (shouldHandlePromise(promise)) {\n        AsyncState.setResult(result);\n      }\n      normalizedOptions.onSuccess(result, {\n        isCurrent: function isCurrent() {\n          return CurrentPromise.is(promise);\n        }\n      });\n    }, function (error) {\n      if (shouldHandlePromise(promise)) {\n        AsyncState.setError(error);\n      }\n      normalizedOptions.onError(error, {\n        isCurrent: function isCurrent() {\n          return CurrentPromise.is(promise);\n        }\n      });\n    });\n    return promise;\n  };\n  var getLatestExecuteAsyncOperation = useGetter(executeAsyncOperation);\n  var executeAsyncOperationMemo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return getLatestExecuteAsyncOperation().apply(void 0, arguments);\n  }, [getLatestExecuteAsyncOperation]); // Keep this outside useEffect, because inside isMounted()\n  // will be true as the component is already mounted when it's run\n\n  var isMounting = !isMounted();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var execute = function execute() {\n      return getLatestExecuteAsyncOperation().apply(void 0, params);\n    };\n    isMounting && normalizedOptions.executeOnMount && execute();\n    !isMounting && normalizedOptions.executeOnUpdate && execute();\n  }, params);\n  return _extends({}, AsyncState.value, {\n    set: AsyncState.set,\n    merge: AsyncState.merge,\n    reset: AsyncState.reset,\n    execute: executeAsyncOperationMemo,\n    currentPromise: CurrentPromise.get(),\n    currentParams: currentParams\n  });\n};\nfunction useAsync(asyncFunction, params, options) {\n  return useAsyncInternal(asyncFunction, params, options);\n}\nvar useAsyncAbortable = function useAsyncAbortable(asyncFunction, params, options) {\n  var abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(); // Wrap the original async function and enhance it with abortion login\n\n  var asyncFunctionWrapper = function asyncFunctionWrapper() {\n    for (var _len2 = arguments.length, p = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      p[_key2] = arguments[_key2];\n    }\n    try {\n      // Cancel previous async call\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      } // Create/store new abort controller for next async call\n\n      var abortController = new AbortController();\n      abortControllerRef.current = abortController;\n      return Promise.resolve(_finallyRethrows(function () {\n        // @ts-ignore // TODO how to type this?\n        return Promise.resolve(asyncFunction.apply(void 0, [abortController.signal].concat(p)));\n      }, function (_wasThrown, _result) {\n        // Unset abortController ref if response is already there,\n        // as it's not needed anymore to try to abort it (would it be no-op?)\n        if (abortControllerRef.current === abortController) {\n          abortControllerRef.current = undefined;\n        }\n        if (_wasThrown) throw _result;\n        return _result;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  return useAsync(asyncFunctionWrapper, params, options);\n};\nvar useAsyncCallback = function useAsyncCallback(asyncFunction, options) {\n  return useAsyncInternal(asyncFunction,\n  // Hacky but in such case we don't need the params,\n  // because async function is only executed manually\n  [], _extends({}, options, {\n    executeOnMount: false,\n    executeOnUpdate: false\n  }));\n};\n\n\n//# sourceURL=webpack://hubris-web/./node_modules/react-async-hook/dist/react-async-hook.esm.js?");

/***/ }),

/***/ "./node_modules/use-immer/dist/use-immer.module.js":
/*!*********************************************************!*\
  !*** ./node_modules/use-immer/dist/use-immer.module.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useImmer: () => (/* binding */ i),\n/* harmony export */   useImmerReducer: () => (/* binding */ e)\n/* harmony export */ });\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! immer */ \"./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction i(f) {\n  var u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n      return (0,immer__WEBPACK_IMPORTED_MODULE_1__.freeze)(\"function\" == typeof f ? f() : f, !0);\n    }),\n    i = u[1];\n  return [u[0], (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (t) {\n    i(\"function\" == typeof t ? (0,immer__WEBPACK_IMPORTED_MODULE_1__.produce)(t) : (0,immer__WEBPACK_IMPORTED_MODULE_1__.freeze)(t));\n  }, [])];\n}\nfunction e(n, t, o) {\n  var i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return (0,immer__WEBPACK_IMPORTED_MODULE_1__.produce)(n);\n  }, [n]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(i, t, o);\n}\n\n\n//# sourceURL=webpack://hubris-web/./node_modules/use-immer/dist/use-immer.module.js?");

/***/ })

}]);