//ðŸ§©Don't Edit this file.âœ¨Generated in Thu Mar 21 2024 20:37:57 GMT-0400 (Eastern Daylight Time)âœ¨

datasource db {
  provider     = "mysql"
  url          = env("DB_DEV")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Campaigns {
  id           String       @id @unique @default(uuid())
  name         String       @default("Untitled Campaign")
  description  String?      @db.MediumText
  settings     Settings[]
  dm           Users?       @relation(fields: [dmId], references: [id], name: "dm")
  players      Users[]      @relation(name: "players")
  xp           Int          @default(0)
  dmId         String?
  characters   Characters[]
  sessionCount Int          @default(0)
  logbook      Summaries[]
}

model Summaries {
  session    Int
  timestamp  DateTime   @default(now())
  campaign   Campaigns  @relation(fields: [campaignId], references: [id])
  campaignId String
  text       String     @db.LongText
  font       String     @default("iosevka")
  size       Int        @default(14)
  author     Characters @relation(fields: [authorId], references: [id])
  authorId   String

  @@unique([campaignId, session])
}

model Characters {
  id             String           @id @unique
  user           Users            @relation(fields: [usersId], references: [id])
  updated        DateTime         @default(now())
  biography      Json
  xp_earned      Int
  burn           Int              @default(0)
  HD             HD[]
  classes        Classes[]
  backgrounds    Backgrounds[]
  effects        Effects[]
  ranges         Ranges[]
  durations      Durations[]
  class_features Class_Features[]
  tag_features   Tag_Features[]
  skills         Skills[]
  inventory      Inventories?
  str            Int
  dex            Int
  con            Int
  wis            Int
  int            Int
  cha            Int
  health         Health?
  usersId        String
  powers         Powers[]
  campaign       Campaigns?       @relation(fields: [campaignId], references: [id])
  campaignId     String?
  summaries      Summaries[]
  font           String?
}

model HD {
  owner        Characters @relation(fields: [charactersId], references: [id], onDelete: Cascade)
  src          String     @default("default")
  die          Hit_Dice   @relation(fields: [hit_diceId], references: [entryId])
  max          Int        @default(1)
  used         Int        @default(0)
  charactersId String
  hit_diceId   String

  @@unique(name: "id", [charactersId, hit_diceId, src])
}

model Health {
  character    Characters @relation(fields: [charactersId], references: [id], onDelete: Cascade)
  injuries     Injuries?  @relation(fields: [injuriesId], references: [entryId])
  hp           Int
  notes        String?    @db.MediumText
  injuriesId   String?
  charactersId String     @id @unique
}

model Inventories {
  character Characters? @relation(fields: [charactersId], references: [id], onDelete: Cascade)

  wielding Weapons? @relation(name: "wielding", fields: [weaponsId], references: [entryId])
  wearing  Armor?   @relation(name: "wearing", fields: [armorId], references: [entryId])
  using    Items[]  @relation(name: "using")

  weapons Weapons[]
  armor   Armor[]
  items   Items[]

  charactersId String  @id @unique
  weaponsId    String?
  armorId      String?
}

model Rules {
  title        String   @id @unique
  config       Boolean  @default(true)
  src          String   @default("core-rules")
  last_updated DateTime @default("1980-01-01T01:00:00-05:00")
}

model Index {
  id    String @unique
  table String
}

model Description {
  entryId String    @id @unique
  content Content[] @relation("source")
  entry   Entry?    @relation(fields: [entryId], references: [id])
}

model Content {
  index     Int
  src       Description @relation("source", fields: [srcId], references: [entryId])
  srcId     String
  plaintext String      @db.MediumText
  link      Link?

  @@id(name: "id", [index, srcId])
  @@unique([index, srcId])
}

model Link {
  content  Content @relation(fields: [contentIndex, contentSrc], references: [index, srcId])
  target   Entry   @relation("target", fields: [targetId], references: [id])
  targetId String

  contentIndex Int
  contentSrc   String

  @@id(name: "id", [contentIndex, contentSrc])
  @@unique([contentIndex, contentSrc])
}

model Weapons {
  entry   Entry      @relation(fields: [entryId], references: [id])
  uses    Attributes @relation(fields: [attrCode], references: [code])
  tags    Tags[]
  bonus   Int?
  martial Boolean
  heavy   Boolean

  owned_by   Inventories[]
  wielded_by Inventories[] @relation("wielding")

  attrCode String
  entryId  String @id @unique
}

model Armor {
  entry Entry @relation(fields: [entryId], references: [id])

  class String

  entryId String @id @unique

  owned_by Inventories[]
  worn_by  Inventories[] @relation("wearing")
}

model Items {
  entry Entry @relation(fields: [entryId], references: [id])

  owned_by Inventories[]
  used_by  Inventories[] @relation("using")
  entryId  String        @id @unique
}

model Powers {
  id         String       @id @unique
  name       String
  flavortext String       @db.LongText
  creator    Users        @relation(fields: [creatorId], references: [id])
  creatorId  String
  effects    Effects[]
  ranges     Ranges[]
  durations  Durations[]
  characters Characters[]
}

model Entry {
  id          String       @id @unique
  title       String       @db.MediumText
  description Description?
  mentions    Link[]       @relation("target")

  Tags                Tags?
  Hit_Dice            Hit_Dice?
  Timespans           Timespans?
  Distances           Distances?
  Tag_Features        Tag_Features?
  Effects             Effects?
  Trees               Trees?
  Durations           Durations?
  Ranges              Ranges?
  Classes             Classes?
  Class_Features      Class_Features?
  Class_Paths         Class_Paths?
  Attributes          Attributes?
  Skills              Skills?
  Backgrounds         Backgrounds?
  Settings            Settings?
  Background_Features Background_Features?
  Conditions          Conditions?
  Injuries            Injuries?
  Weapons             Weapons?
  Armor               Armor?
  Items               Items?
}

model Tags {
  entry        Entry          @relation(fields: [entryId], references: [id])
  entryId      String         @id @unique
  effects      Effects[]
  classes      Classes[]
  tag_features Tag_Features[]
  alias        String?
  weapons      Weapons[]
}

model Hit_Dice {
  entry   Entry     @relation(fields: [entryId], references: [id])
  entryId String    @id @unique
  cost    Int       @default(1)
  classes Classes[]
  HD      HD[]
}

model Timespans {
  entry     Entry       @relation(fields: [entryId], references: [id])
  entryId   String      @unique
  injuries  Injuries[]
  durations Durations[]
}

model Distances {
  entry   Entry    @relation(fields: [entryId], references: [id])
  entryId String   @unique
  range   Ranges[] @relation("distances_ranges")
  areas   Ranges[] @relation("distances_areas")
}

model Tag_Features {
  entry        Entry?         @relation(fields: [entryId], references: [id])
  entryId      String         @id @unique
  ticks        Int?
  tier         Int
  xp           Int
  tags         Tags?          @relation(fields: [tagsId], references: [entryId])
  tagsId       String?
  requires     Tag_Features[] @relation("tag_features_prq")
  required_for Tag_Features[] @relation("tag_features_prq")
  characters   Characters[]
}

model Effects {
  entry        Entry        @relation(fields: [entryId], references: [id])
  entryId      String       @id @unique
  power        Float
  xp           Int
  tier         Int
  requires     Effects[]    @relation("effects_prq")
  required_for Effects[]    @relation("effects_prq")
  range        Ranges?      @relation(fields: [rangeId], references: [entryId], onDelete: Cascade)
  duration     Durations?   @relation(fields: [durationId], references: [entryId], onDelete: Cascade)
  tags         Tags[]
  trees        Trees?       @relation(fields: [treesId], references: [entryId])
  treesId      String?
  characters   Characters[]
  powers       Powers[]
  rangeId      String?
  durationId   String?
}

model Trees {
  entry     Entry       @relation(fields: [entryId], references: [id])
  entryId   String      @id @unique
  effects   Effects[]
  ranges    Ranges[]
  durations Durations[]
}

model Durations {
  entry        Entry        @relation(fields: [entryId], references: [id])
  entryId      String       @id @unique
  power        Float
  xp           Int
  tier         Int
  ticks        Int?
  requires     Durations[]  @relation("durations_prq")
  required_for Durations[]  @relation("durations_prq")
  trees        Trees[]
  characters   Characters[]
  charactersId String?
  powers       Powers[]
  duration     Timespans?   @relation(fields: [timespansId], references: [entryId])
  timespansId  String?
  effects      Effects[]
}

model Ranges {
  entry        Entry        @relation(fields: [entryId], references: [id])
  entryId      String       @id @unique
  power        Float
  xp           Int
  tier         Int
  requires     Ranges[]     @relation("ranges_prq")
  required_for Ranges[]     @relation("ranges_prq")
  area         Distances?   @relation("distances_areas", fields: [areaId], references: [entryId])
  range        Distances?   @relation("distances_ranges", fields: [rangeId], references: [entryId])
  trees        Trees[]
  characters   Characters[]
  powers       Powers[]
  areaId       String?
  rangeId      String?
  effects      Effects[]
}

model Classes {
  entry          Entry            @relation(fields: [entryId], references: [id])
  entryId        String           @id @unique
  weaponry       String
  armory         String           @default("None")
  attributes     Attributes[]
  class_features Class_Features[]
  class_paths    Class_Paths[]
  tags           Tags[]
  characters     Characters[]
  hit_dice       Hit_Dice?        @relation(fields: [hit_DiceId], references: [entryId])
  hit_DiceId     String?
}

model Class_Features {
  entry         Entry            @relation(fields: [entryId], references: [id])
  entryId       String           @id @unique
  xp            Int
  ticks         Int?
  tier          Int
  class_paths   Class_Paths?     @relation(fields: [class_PathsId], references: [entryId])
  classes       Classes?         @relation(fields: [classesId], references: [entryId])
  class_PathsId String?
  classesId     String?
  requires      Class_Features[] @relation("class_features_prq")
  required_for  Class_Features[] @relation("class_features_prq")
  charcters     Characters[]
}

model Class_Paths {
  entry          Entry            @relation(fields: [entryId], references: [id])
  entryId        String           @id @unique
  class_features Class_Features[]
  classesId      String?
  classes        Classes?         @relation(fields: [classesId], references: [entryId])
}

model Attributes {
  entry       Entry         @relation(fields: [entryId], references: [id])
  entryId     String        @id @unique
  code        String        @unique
  backgrounds Backgrounds[]
  skills      Skills[]
  classes     Classes[]
  conditions  Conditions[]
  weapons     Weapons[]
}

model Skills {
  entry        Entry         @relation(fields: [entryId], references: [id])
  entryId      String        @id @unique
  backgrounds  Backgrounds[]
  characters   Characters[]
  attributesId String?
  attributes   Attributes?   @relation(fields: [attributesId], references: [entryId])
}

model Backgrounds {
  entry                 Entry                @relation(fields: [entryId], references: [id])
  entryId               String               @id @unique
  settings              Settings?            @relation(fields: [settingsId], references: [entryId])
  attributes            Attributes?          @relation(fields: [attributesId], references: [entryId])
  skills                Skills?              @relation(fields: [skillsId], references: [entryId])
  background_features   Background_Features? @relation(fields: [background_featuresId], references: [entryId])
  skillsId              String?
  attributesId          String?
  settingsId            String?
  background_featuresId String?              @unique
  characters            Characters[]
}

model Settings {
  entry       Entry         @relation(fields: [entryId], references: [id])
  entryId     String        @id @unique
  backgrounds Backgrounds[]
  campaigns   Campaigns[]
}

model Background_Features {
  entry       Entry        @relation(fields: [entryId], references: [id])
  entryId     String       @id @unique
  ticks       Int?
  backgrounds Backgrounds?
}

model Injuries {
  entry       Entry        @relation(fields: [entryId], references: [id])
  entryId     String       @id @unique
  health      Health[]
  conditions  Conditions[]
  duration    Timespans?   @relation(fields: [timespansId], references: [entryId])
  timespansId String?
}

model Conditions {
  entry      Entry        @relation(fields: [entryId], references: [id])
  entryId    String       @id @unique
  attributes Attributes[]
  injuries   Injuries[]
}

model Users {
  id         String       @id @unique @default(uuid())
  username   String       @unique
  password   String
  Characters Characters[]
  Powers     Powers[]
  PlayingIn  Campaigns[]  @relation(name: "players")
  DMing      Campaigns[]  @relation(name: "dm")
}
