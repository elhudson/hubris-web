//ðŸ§©Don't Edit this file.âœ¨Generated in Wed Feb 28 2024 09:41:44 GMT-0500 (Eastern Standard Time)âœ¨

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Campaigns {
  id           String       @id @unique @default(uuid())
  name         String       @default("Untitled Campaign")
  description  String?      @db.MediumText
  settings     Settings[]
  dm           Users?       @relation(fields: [dmId], references: [id], name: "dm")
  players      Users[]      @relation(name: "players")
  xp           Int          @default(0)
  dmId         String?
  characters   Characters[]
  sessionCount Int          @default(0)
  logbook      Summaries[]
}

model Summaries {
  session    Int
  timestamp  DateTime   @default(now())
  campaign   Campaigns  @relation(fields: [campaignId], references: [id])
  campaignId String
  text       String     @db.LongText
  author     Characters @relation(fields: [authorId], references: [id])
  authorId   String

  @@unique([campaignId, session])
}

model Characters {
  id             String           @id @unique
  user           Users            @relation(fields: [usersId], references: [id])
  updated        DateTime         @default(now())
  biography      Json
  xp_earned      Int
  burn           Int              @default(0)
  HD             HD[]
  classes        Classes[]
  backgrounds    Backgrounds[]
  effects        Effects[]
  ranges         Ranges[]
  durations      Durations[]
  class_features Class_Features[]
  tag_features   Tag_Features[]
  skills         Skills[]
  inventory      Inventories?
  str            Int
  dex            Int
  con            Int
  wis            Int
  int            Int
  cha            Int
  health         Health?
  usersId        String
  powers         Powers[]
  campaign       Campaigns?       @relation(fields: [campaignId], references: [id])
  campaignId     String?
  summaries      Summaries[]
  font           String?
}

model HD {
  id           Int        @id @default(autoincrement())
  owner        Characters @relation(fields: [charactersId], references: [id])
  src          String     @default("default")
  die          Hit_Dice?  @relation(fields: [hit_diceId], references: [id])
  max          Int        @default(1)
  used         Int        @default(0)
  charactersId String
  hit_diceId   String?
}

model Health {
  character    Characters @relation(fields: [charactersId], references: [id])
  injuries     Injuries?  @relation(fields: [injuriesId], references: [id])
  hp           Int
  notes        String?    @db.MediumText
  injuriesId   String?
  charactersId String     @id @unique
}

model Inventories {
  character Characters? @relation(fields: [charactersId], references: [id])
  weapons   Weapons[]
  armor     Armor[]
  items     Items[]

  charactersId String @id @unique
}

model Rules {
  id     String  @unique
  title  String
  config Boolean @default(true)
  src    String  @default("core-rules")
}

model Index {
  id    String @unique
  table String
}

model Weapons {
  id          String        @id @unique
  name        String        @default("")
  description String?
  uses        String?       @default("str")
  tags        Tags[]
  bonus       Int?
  martial     Boolean
  heavy       Boolean
  equipped    Boolean       @default(false)
  Inventories Inventories[]
}

model Armor {
  id          String  @id @unique
  class       String
  name        String  @default("")
  description String?
  equipped    Boolean @default(false)

  Inventories Inventories[]
}

model Items {
  id          String        @id @unique
  name        String        @default("")
  description String?
  equipped    Boolean       @default(false)
  Inventories Inventories[]
}

model Powers {
  id         String       @id @unique
  name       String
  flavortext String       @db.LongText
  creator    Users        @relation(fields: [creatorId], references: [id])
  creatorId  String
  effects    Effects[]
  ranges     Ranges[]
  durations  Durations[]
  characters Characters[]
}

model Tags {
  id           String         @id @unique
  title        String         @db.MediumText
  description  String?        @db.MediumText
  effects      Effects[]
  classes      Classes[]
  tag_features Tag_Features[]
  alias        String?
  weapons      Weapons[]
}

model Hit_Dice {
  id          String    @id @unique
  title       String
  description String?
  cost        Int       @default(1)
  classes     Classes[]
  HD          HD[]
}

model Timespans {
  id          String      @id @unique
  title       String
  description String?
  injuries    Injuries[]
  durations   Durations[]
}

model Distances {
  id          String   @id @unique
  title       String
  description String?
  range       Ranges[] @relation("distances_ranges")
  areas       Ranges[] @relation("distances_areas")
}

model Tag_Features {
  id           String         @id @unique
  title        String
  description  String?        @db.MediumText
  ticks        Int?
  tier         Int
  xp           Int
  tags         Tags?          @relation(fields: [tagsId], references: [id])
  tagsId       String?
  requires     Tag_Features[] @relation("tag_features_prq")
  required_for Tag_Features[] @relation("tag_features_prq")
  Characters   Characters[]
  charactersId String?
}

model Effects {
  id           String       @id @unique
  title        String?
  description  String       @db.MediumText
  power        Float
  xp           Int
  tier         Int
  requires     Effects[]    @relation("effects_prq")
  required_for Effects[]    @relation("effects_prq")
  range        Ranges?      @relation(fields: [rangeId], references: [id])
  duration     Durations?   @relation(fields: [durationId], references: [id])
  tags         Tags[]
  trees        Trees?       @relation(fields: [treesId], references: [id])
  treesId      String?
  Characters   Characters[]
  charactersId String?
  Powers       Powers[]
  rangeId      String?
  durationId   String?
}

model Trees {
  id          String      @id @unique
  title       String?
  description String      @db.MediumText
  effects     Effects[]
  ranges      Ranges[]
  durations   Durations[]
}

model Durations {
  id           String       @id @unique
  title        String?
  description  String       @db.MediumText
  power        Float
  xp           Int
  tier         Int
  ticks        Int?
  requires     Durations[]  @relation("durations_prq")
  required_for Durations[]  @relation("durations_prq")
  trees        Trees[]
  characters   Characters[]
  charactersId String?
  powers       Powers[]
  duration     Timespans?   @relation(fields: [timespansId], references: [id])
  timespansId  String?
  effects      Effects[]
}

model Ranges {
  id           String       @id @unique
  title        String?
  description  String       @db.MediumText
  power        Float
  xp           Int
  tier         Int
  requires     Ranges[]     @relation("ranges_prq")
  required_for Ranges[]     @relation("ranges_prq")
  area         Distances?   @relation("distances_areas", fields: [areaId], references: [id])
  range        Distances?   @relation("distances_ranges", fields: [rangeId], references: [id])
  trees        Trees[]
  characters   Characters[]
  charactersId String?
  powers       Powers[]
  areaId       String?
  rangeId      String?
  effects      Effects[]
}

model Classes {
  id             String           @id @unique
  title          String?
  description    String           @db.MediumText
  weaponry       String
  armory         String           @default("None")
  attributes     Attributes[]
  class_features Class_Features[]
  class_paths    Class_Paths[]
  tags           Tags[]
  Characters     Characters[]
  hit_dice       Hit_Dice?        @relation(fields: [hit_DiceId], references: [id])
  hit_DiceId     String?
}

model Class_Features {
  id            String           @id @unique
  title         String?
  description   String           @db.MediumText
  xp            Int
  ticks         Int?
  tier          Int
  class_paths   Class_Paths?     @relation(fields: [class_PathsId], references: [id])
  classes       Classes?         @relation(fields: [classesId], references: [id])
  class_PathsId String?
  classesId     String?
  requires      Class_Features[] @relation("class_features_prq")
  required_for  Class_Features[] @relation("class_features_prq")
  Characters    Characters[]
}

model Class_Paths {
  id             String           @id @unique
  title          String?
  description    String           @db.MediumText
  class_features Class_Features[]
  classes        Classes?         @relation(fields: [classesId], references: [id])
  classesId      String?
}

model Attributes {
  id          String        @id @unique
  title       String?
  description String        @db.MediumText
  code        String
  backgrounds Backgrounds[]
  skills      Skills[]
  classes     Classes[]
  conditions  Conditions[]
}

model Skills {
  id            String       @id @unique
  title         String?
  description   String       @db.MediumText
  examples      String?      @db.MediumText
  attributes    Attributes?  @relation(fields: [attributesId], references: [id])
  backgrounds   Backgrounds?
  characters    Characters[]
  attributesId  String?
  backgroundsId String?
}

model Backgrounds {
  id                  String               @id @unique
  title               String?
  description         String               @db.MediumText
  questions           String?              @db.MediumText
  settings            Settings?            @relation(fields: [settingsId], references: [id])
  attributes          Attributes?          @relation(fields: [attributesId], references: [id])
  skills              Skills?              @relation(fields: [skillsId], references: [id])
  background_features Background_Features?
  skillsId            String?              @unique
  attributesId        String?
  settingsId          String?
  Characters          Characters[]
}

model Settings {
  id          String        @id @unique
  title       String
  backgrounds Backgrounds[]
  description String        @db.MediumText
  campaigns   Campaigns[]
}

model Background_Features {
  id            String       @id @unique
  title         String
  description   String       @db.MediumText
  ticks         Int?
  backgrounds   Backgrounds? @relation(fields: [backgroundsId], references: [id])
  backgroundsId String?      @unique
}

model Injuries {
  id          String       @id @unique
  title       String
  health      Health[]
  description String?
  conditions  Conditions[]
  Timespans   Timespans?   @relation(fields: [timespansId], references: [id])
  timespansId String?
}

model Conditions {
  id          String       @id @unique
  title       String
  description String       @db.MediumText
  attributes  Attributes[]
  injuries    Injuries[]
}

model Users {
  id         String       @id @unique @default(uuid())
  username   String       @unique
  password   String
  Characters Characters[]
  Powers     Powers[]
  PlayingIn  Campaigns[]  @relation(name: "players")
  DMing      Campaigns[]  @relation(name: "dm")
}
