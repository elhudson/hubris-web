import {Weapons, Items, Armor} from "./inventory"
import {HD, Health, Characters} from "./character"
import {Powers} from "./powers"
import {Campaigns} from "./campaign"
import { Description, Link } from "index"

model Entry {
  id          String       @id @unique
  title       String       @db.MediumText
  description Description?
  mentions    Link[]       @relation("target")

  Tags                Tags?
  Hit_Dice            Hit_Dice?
  Timespans           Timespans?
  Distances           Distances?
  Tag_Features        Tag_Features?
  Effects             Effects?
  Trees               Trees?
  Durations           Durations?
  Ranges              Ranges?
  Classes             Classes?
  Class_Features      Class_Features?
  Class_Paths         Class_Paths?
  Attributes          Attributes?
  Skills              Skills?
  Backgrounds         Backgrounds?
  Settings            Settings?
  Background_Features Background_Features?
  Conditions          Conditions?
  Injuries            Injuries?
  Weapons             Weapons?
  Armor               Armor?
  Items               Items?
}

model Tags {
  entry        Entry          @relation(fields: [entryId], references: [id])
  entryId      String         @id @unique
  effects      Effects[]
  classes      Classes[]
  tag_features Tag_Features[]
  alias        String?
  weapons      Weapons[]
}

model Hit_Dice {
  entry   Entry     @relation(fields: [entryId], references: [id])
  entryId String    @id @unique
  cost    Int       @default(1)
  classes Classes[]
  HD      HD[]
}

model Timespans {
  entry     Entry       @relation(fields: [entryId], references: [id])
  entryId   String      @unique
  injuries  Injuries[]
  durations Durations[]
}

model Distances {
  entry   Entry    @relation(fields: [entryId], references: [id])
  entryId String   @unique
  range   Ranges[] @relation("distances_ranges")
  areas   Ranges[] @relation("distances_areas")
}

model Tag_Features {
  entry        Entry?         @relation(fields: [entryId], references: [id])
  entryId      String         @id @unique
  ticks        Int?
  tier         Int
  xp           Int
  tags         Tags?          @relation(fields: [tagsId], references: [entryId])
  tagsId       String?
  requires     Tag_Features[] @relation("tag_features_prq")
  required_for Tag_Features[] @relation("tag_features_prq")
  characters   Characters[]
}

model Effects {
  entry        Entry        @relation(fields: [entryId], references: [id])
  entryId      String       @id @unique
  power        Float
  xp           Int
  tier         Int
  requires     Effects[]    @relation("effects_prq")
  required_for Effects[]    @relation("effects_prq")
  range        Ranges?      @relation(fields: [rangeId], references: [entryId], onDelete: Cascade)
  duration     Durations?   @relation(fields: [durationId], references: [entryId], onDelete: Cascade)
  tags         Tags[]
  trees        Trees?       @relation(fields: [treesId], references: [entryId])
  treesId      String?
  characters   Characters[]
  powers       Powers[]
  rangeId      String?
  durationId   String?
}

model Trees {
  entry     Entry       @relation(fields: [entryId], references: [id])
  entryId   String      @id @unique
  effects   Effects[]
  ranges    Ranges[]
  durations Durations[]
}

model Durations {
  entry        Entry        @relation(fields: [entryId], references: [id])
  entryId      String       @id @unique
  power        Float
  xp           Int
  tier         Int
  ticks        Int?
  requires     Durations[]  @relation("durations_prq")
  required_for Durations[]  @relation("durations_prq")
  trees        Trees[]
  characters   Characters[]
  charactersId String?
  powers       Powers[]
  duration     Timespans?   @relation(fields: [timespansId], references: [entryId])
  timespansId  String?
  effects      Effects[]
}

model Ranges {
  entry        Entry        @relation(fields: [entryId], references: [id])
  entryId      String       @id @unique
  power        Float
  xp           Int
  tier         Int
  requires     Ranges[]     @relation("ranges_prq")
  required_for Ranges[]     @relation("ranges_prq")
  area         Distances?   @relation("distances_areas", fields: [areaId], references: [entryId])
  range        Distances?   @relation("distances_ranges", fields: [rangeId], references: [entryId])
  trees        Trees[]
  characters   Characters[]
  powers       Powers[]
  areaId       String?
  rangeId      String?
  effects      Effects[]
}

model Classes {
  entry          Entry            @relation(fields: [entryId], references: [id])
  entryId        String           @id @unique
  weaponry       String
  armory         String           @default("None")
  attributes     Attributes[]
  class_features Class_Features[]
  class_paths    Class_Paths[]
  tags           Tags[]
  characters     Characters[]
  hit_dice       Hit_Dice?        @relation(fields: [hit_DiceId], references: [entryId])
  hit_DiceId     String?
}

model Class_Features {
  entry         Entry            @relation(fields: [entryId], references: [id])
  entryId       String           @id @unique
  xp            Int
  ticks         Int?
  tier          Int
  class_paths   Class_Paths?     @relation(fields: [class_PathsId], references: [entryId])
  classes       Classes?         @relation(fields: [classesId], references: [entryId])
  class_PathsId String?
  classesId     String?
  requires      Class_Features[] @relation("class_features_prq")
  required_for  Class_Features[] @relation("class_features_prq")
  charcters     Characters[]
}

model Class_Paths {
  entry          Entry            @relation(fields: [entryId], references: [id])
  entryId        String           @id @unique
  class_features Class_Features[]
  classesId      String?
  classes        Classes?         @relation(fields: [classesId], references: [entryId])
}

model Attributes {
  entry       Entry         @relation(fields: [entryId], references: [id])
  entryId     String        @id @unique
  code        String        @unique
  backgrounds Backgrounds[]
  skills      Skills[]
  classes     Classes[]
  conditions  Conditions[]
  weapons     Weapons[]
}

model Skills {
  entry        Entry         @relation(fields: [entryId], references: [id])
  entryId      String        @id @unique
  backgrounds  Backgrounds[]
  characters   Characters[]
  attributesId String?
  attributes   Attributes?   @relation(fields: [attributesId], references: [entryId])
}

model Backgrounds {
  entry                 Entry                @relation(fields: [entryId], references: [id])
  entryId               String               @id @unique
  settings              Settings?            @relation(fields: [settingsId], references: [entryId])
  attributes            Attributes?          @relation(fields: [attributesId], references: [entryId])
  skills                Skills?              @relation(fields: [skillsId], references: [entryId])
  background_features   Background_Features? @relation(fields: [background_featuresId], references: [entryId])
  skillsId              String?
  attributesId          String?
  settingsId            String?
  background_featuresId String?              @unique
  characters            Characters[]
}

model Settings {
  entry       Entry         @relation(fields: [entryId], references: [id])
  entryId     String        @id @unique
  backgrounds Backgrounds[]
  campaigns   Campaigns[]
}

model Background_Features {
  entry       Entry        @relation(fields: [entryId], references: [id])
  entryId     String       @id @unique
  ticks       Int?
  backgrounds Backgrounds?
}

model Injuries {
  entry       Entry        @relation(fields: [entryId], references: [id])
  entryId     String       @id @unique
  health      Health[]
  conditions  Conditions[]
  duration    Timespans?   @relation(fields: [timespansId], references: [entryId])
  timespansId String?
}

model Conditions {
  entry      Entry        @relation(fields: [entryId], references: [id])
  entryId    String       @id @unique
  attributes Attributes[]
  injuries   Injuries[]
}
