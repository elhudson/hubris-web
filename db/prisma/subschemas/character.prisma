import {Classes, Backgrounds, Entry, Injuries, Attributes, Effects, Ranges, Durations, Class_Features, Tag_Features, Skills, Hit_Dice} from "./rules"
import {Users} from "./user"
import {Weapons, Armor, Items} from "./inventory"
import { Characters } from "./character"
import {Campaigns, Summaries} from "./campaign"
import {Powers} from "./powers"
import { Hit_Dice } from "../schema"
import { Armor } from "inventory"

model Characters {
  id             String           @id @unique
  user           Users            @relation(fields: [usersId], references: [id])
  updated        DateTime         @default(now())
  biography      Json
  xp_earned      Int
  burn           Int              @default(0)
  HD             HD[]
  classes        Classes[]
  backgrounds    Backgrounds[]
  effects        Effects[]
  ranges         Ranges[]
  durations      Durations[]
  class_features Class_Features[]
  tag_features   Tag_Features[]
  skills         Skills[]
  inventory      Inventories?
  str            Int
  dex            Int
  con            Int
  wis            Int
  int            Int
  cha            Int
  health         Health?
  usersId        String
  powers         Powers[]
  campaign       Campaigns?       @relation(fields: [campaignId], references: [id])
  campaignId     String?
  summaries      Summaries[]
  font           String?
}

model HD {
  owner        Characters @relation(fields: [charactersId], references: [id], onDelete: Cascade)
  src          String     @default("default")
  die          Hit_Dice   @relation(fields: [hit_diceId], references: [entryId])
  max          Int        @default(1)
  used         Int        @default(0)
  charactersId String
  hit_diceId   String

  @@unique(name: "id", [charactersId, hit_diceId, src])
}

model Health {
  character    Characters @relation(fields: [charactersId], references: [id], onDelete: Cascade)
  injuries     Injuries?  @relation(fields: [injuriesId], references: [entryId])
  hp           Int
  notes        String?    @db.MediumText
  injuriesId   String?
  charactersId String     @id @unique
}

model Inventories {
  character Characters? @relation(fields: [charactersId], references: [id], onDelete: Cascade)

  wielding Weapons? @relation(name: "wielding", fields: [weaponsId], references: [entryId])
  wearing  Armor?   @relation(name: "wearing", fields: [armorId], references: [entryId])
  using    Items[]  @relation(name: "using")

  weapons Weapons[]
  armor   Armor[]
  items   Items[]

  charactersId String  @id @unique
  weaponsId    String?
  armorId      String?
}
