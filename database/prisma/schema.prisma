datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Tags {
  id           String         @id @unique
  title        String
  description  String
  effects      Effects[]
  Tag_Features Tag_Features[]
}

model Tag_Features {
  id           String         @id @unique
  title        String
  description  String
  ticks        Int?
  tags         Tags?          @relation(fields: [tagsId], references: [id])
  tagsId       String?        
  requires     Tag_Features[] @relation("tag_features_prq")
  required_for Tag_Features[] @relation("tag_features_prq")
}

model Effects {
  id           String    @id @unique
  title        String?
  description  String
  power        Float
  xp           Int
  tier         Int
  requires     Effects[] @relation("effects_prq")
  required_for Effects[] @relation("effects_prq")
  tags         Tags[]
  trees        Trees?    @relation(fields: [treesId], references: [id])
  treesId      String?   
}

model Trees {
  id          String      @id @unique
  title       String?
  description String
  effects     Effects[]
  ranges      Ranges[]
  durations   Durations[]
}

model Durations {
  id           String      @id @unique
  title        String?
  description  String
  power        Float
  xp           Int
  tier         Int
  ticks        Int
  requires     Durations[] @relation("durations_prq")
  required_for Durations[] @relation("durations_prq")
  trees        Trees[]
}

model Ranges {
  id           String   @id @unique
  title        String?
  description  String
  power        Float
  xp           Int
  tier         Int
  requires     Ranges[] @relation("ranges_prq")
  required_for Ranges[] @relation("ranges_prq")
  trees        Trees[]
}

model Classes {
  id             String           @id @unique
  title          String?
  description    String
  abilities      Abilities[]
  skills         Skills[]
  class_features Class_Features[]
  class_paths    Class_Paths[]
}

model Class_Features {
  id            String           @id @unique
  title         String?
  description   String
  xp            Int
  ticks         Int?
  class_paths   Class_Paths?     @relation(fields: [class_PathsId], references: [id])
  classes       Classes?         @relation(fields: [classesId], references: [id])
  class_PathsId String?          
  classesId     String?          
  requires      Class_Features[] @relation("class_features_prq")
  required_for  Class_Features[] @relation("class_features_prq")
}

model Class_Paths {
  id             String           @id @unique
  title          String?
  description    String
  class_features Class_Features[]
  classes        Classes?         @relation(fields: [classesId], references: [id])
  classesId      String?          
}

model Abilities {
  id          String        @id @unique
  title       String?
  description String
  code        String
  backgrounds Backgrounds[]
  skills      Skills[]
  classes     Classes[]
}

model Skills {
  id            String       @id @unique
  title         String?
  description   String
  abilities     Abilities?   @relation(fields: [abilitiesId], references: [id])
  backgrounds   Backgrounds?
  classes       Classes[]
  abilitiesId   String?      
  backgroundsId String?      
}

model Backgrounds {
  id                  String               @id @unique
  title               String?
  description         String
  setting             String
  abilities           Abilities?           @relation(fields: [abilitiesId], references: [id])
  skills              Skills?              @relation(fields: [skillsId], references: [id])
  background_features Background_Features?
  skillsId            String?              @unique 
  abilitiesId         String?              
}

model Background_Features {
  id            String       @id @unique
  title         String?
  description   String
  ticks         Int?
  backgrounds   Backgrounds? @relation(fields: [backgroundsId], references: [id])
  backgroundsId String?      @unique 
}
